

array_values£¨£©
	$array  = array( "size"  =>  "XL" ,  "color"  =>  "gold" );
	print_r ( array_values ( $array ));
		Array ( [0] => XL [1] => gold )
		
array_keys£¨£©
	$array  = array( 0  =>  100 ,  "color"  =>  "red" );
	print_r ( array_keys ( $array ));
		Array ( [0] => 0 [1] => color )
	$array  = array( "blue" ,  "red" ,  "green" ,  "blue" ,  "blue" );
	print_r ( array_keys ( $array ,  "blue" ));
		 Array ( [0] => 0 [1] => 3 [2] => 4 )
		 
array_flip£¨£©
	$trans  = array( "a"  =>  1 ,  "b"  =>  1 ,  "c"  =>  2 );
	$trans  =  array_flip ( $trans );
	print_r ( $trans );
		Array ( [1] => b [2] => c )
		
in_array£¨£©
	$a  = array( '1.10' ,  12.4 ,  1.13 );
	if ( in_array ( '12.4' ,  $a ,  true )) {
		echo  ""'12.4' found with strict check\n"" ;
	}
	if ( in_array ( 1.13 ,  $a ,  true )) {
		echo  ""1.13 found with strict check\n"" ;
	}
		1.13 found with strict check

array_search£¨£©
	$array  = array( 0  =>  'blue' ,  1  =>  'red' ,  2  =>  'green' ,  3  =>  'red' );
	$key  =  array_search ( 'green' ,  $array );  
	var_dump($key);
		int 2

array_key_exists£¨£©
	$search_array  = array( 'first'  =>  1 ,  'second'  =>  4 );
	if ( array_key_exists ( 'first' ,  $search_array )) {
		echo  ""The 'first' element is in the array"" ;
	}
		The 'first' element is in the array
		
current£¨£©	next£¨£©	prev£¨£©
	$transport  = array( 'foot' ,  'bike' ,  'car' ,  'plane' );
	$mode  =  current ( $transport );  
	$mode  =  next ( $transport );     
	$mode  =  next ( $transport );     
	$mode  =  prev ( $transport );      
		foot	bike	bike

end£¨£©	reset£¨£©
	$fruits  = array( 'apple' ,  'banana' ,  'cranberry' );
	echo  end ( $fruits );
	echo  reset($fruits);
		cranberry	apple

array_slice£¨£©
	$input  = array( ""a"" ,  ""b"" ,  ""c"" ,  ""d"" ,  ""e"" );
	$output  =  array_slice ( $input ,  2 );      
	$output  =  array_slice ( $input , - 2 ,  1 );  
	$output  =  array_slice ( $input ,  0 ,  3 );   
	print_r ( array_slice ( $input ,  2 , - 1 ));
	print_r ( array_slice ( $input ,  2 , - 1 ,  true ));"
		Array ( [0] => c [1] => d ) 
		Array ( [2] => c [3] => d )
		
array_splice£¨£©
	$a1=array(0=>""Dog"",1=>""Cat"",2=>""Horse"",3=>""Bird"");
	$a2=array(0=>""Tiger"",1=>""Lion"");
	array_splice($a1,0,2,$a2);
	print_r($a1);
		Array ( [0] => Tiger [1] => Lion [2] => Horse [3] => Bird )

array_pad£¨£©
	$input  = array( 12 ,  10 ,  9 );
	$result  =  array_pad ( $input ,  10 ,  'a' );
	print_r($result);
		Array ( [0] => 12 [1] => 10 [2] => 9 [3] => a [4] => a [5] => a [6] => a [7] => a [8] => a [9] => a )

array_push£¨£©
	$stack  = array( ""orange"" ,  ""banana"" );
	array_push ( $stack ,  ""apple"" ,  ""raspberry"" );
	print_r ( $stack );
		Array ( [0] => orange [1] => banana [2] => apple [3] => raspberry )

array_pop£¨£©
	$stack  = array( ""orange"" ,  ""banana"" ,  ""apple"" ,  ""raspberry"" );
	$fruit  =  array_pop ( $stack );
	print_r ( $stack );
		Array ( [0] => orange [1] => banana [2] => apple )

array_shift£¨£©
	$stack  = array( ""orange"" ,  ""banana"" ,  ""apple"" ,  ""raspberry"" );
	$fruit  =  array_shift ( $stack );
	print_r ( $stack );
		Array ( [0] => banana [1] => apple [2] => raspberry )

array_unshift£¨£©
	$queue  = array( ""orange"" ,  ""banana"" );
	array_unshift ( $queue ,  ""apple"" ,  ""raspberry"" );
	print_r ( $queue );
		Array ( [0] => apple [1] => raspberry [2] => orange [3] => banana )

sort£¨£©
	$fruits  = array( ""lemon"" ,  ""orange"" ,  ""banana"" ,  ""apple"" );
	sort ( $fruits );
	print_r($fruits);
		Array ( [0] => apple [1] => banana [2] => lemon [3] => orange )

rsort£¨£©
	$fruits  = array( ""lemon"" ,  ""orange"" ,  ""banana"" ,  ""apple"" );
	rsort ( $fruits );
	print_r($fruits);
		Array ( [0] => orange [1] => lemon [2] => banana [3] => apple )

asort£¨£©
	$fruits  = array( ""d""  =>  ""lemon"" ,  ""a""  =>  ""orange"" ,  ""b""  =>  ""banana"" ,  ""c""  =>  ""apple"" );
	asort ( $fruits );
	print_r($fruits);"
		Array ( [c] => apple [b] => banana [d] => lemon [a] => orange )
		
arsort£¨£©
	$fruits  = array( ""d""  =>  ""lemon"" ,  ""a""  =>  ""orange"" ,  ""b""  =>  ""banana"" ,  ""c""  =>  ""apple"" );
	arsort ( $fruits );
	print_r($fruits);
		Array ( [a] => orange [d] => lemon [b] => banana [c] => apple )

ksort£¨£©
	$fruits  = array( ""d"" => ""lemon"" ,  ""a"" => ""orange"" ,  ""b"" => ""banana"" ,  ""c"" => ""apple"" );
	ksort ( $fruits );
	print_r($fruits);
		Array ( [a] => orange [b] => banana [c] => apple [d] => lemon )

krsort£¨£©
	$fruits  = array( ""d"" => ""lemon"" ,  ""a"" => ""orange"" ,  ""b"" => ""banana"" ,  ""c"" => ""apple"" );
	krsort ( $fruits );
	print_r($fruits);
		Array ( [d] => lemon [c] => apple [b] => banana [a] => orange )

natsort£¨£©
	$array1  = array( ""img12.png"" ,  ""img10.png"" ,  ""img2.png"" ,  ""img1.png"" );
	natsort ( $array1 );
	print_r($array1);
		Array ( [3] => img1.png [2] => img2.png [1] => img10.png [0] => img12.png )

natcasesort£¨£©
	$array1 = array( 'IMG0.png' ,  'img12.png' ,  'img10.png' ,  'img2.png' ,  'img1.png' ,  'IMG3.png' );
	natcasesort ( $array1 );
	print_r($array1);
		Array ( [0] => IMG0.png [4] => img1.png [3] => img2.png [5] => IMG3.png [2] => img10.png [1] => img12.png )

array_sum£¨£©
	$a  = array( 2 ,  4 ,  6 ,  8 );
	echo  ""sum(a) = ""  .  array_sum ( $a ) .  ""\n"" ;
		sum(a) = 20

array_merge£¨£©
	$array1  = array( ""color""  =>  ""red"" ,  2 ,  4 );
	$array2  = array( ""a"" ,  ""b"" ,  ""color""  =>  ""green"" ,  ""shape""  =>  ""trapezoid"" ,  4 );
	$result  =  array_merge ( $array1 ,  $array2 );
	print_r ( $result );
		Array ( [color] => green [0] => 2 [1] => 4 [2] => a [3] => b [shape] => trapezoid [4] => 4 )

array_diff£¨£©
	$array1  = array( ""a""  =>  ""green"" ,  ""red"" ,  ""blue"" ,  ""red"" );
	$array2  = array( ""b""  =>  ""green"" ,  ""yellow"" ,  ""red"" );
	$result  =  array_diff ( $array1 ,  $array2 );
	print_r ( $result );
		Array ( [1] => blue )

array_diff_assoc£¨£©
	$array1  = array( ""a""  =>  ""green"" ,  ""b""  =>  ""brown"" ,  ""c""  =>  ""blue"" ,  ""red"" );
	$array2  = array( ""a""  =>  ""green"" ,  ""yellow"" ,  ""red"" );
	$result  =  array_diff_assoc ( $array1 ,  $array2 );
	print_r ( $result );
		Array ( [b] => brown [c] => blue [0] => red )

array_intersect£¨£©
	$array1  = array( ""a""  =>  ""green"" ,  ""red"" ,  ""blue"" );
	$array2  = array( ""b""  =>  ""green"" ,  ""yellow"" ,  ""red"" );
	$result  =  array_intersect ( $array1 ,  $array2 );
	print_r ( $result );
		Array ( [a] => green [0] => red )

array_intersect_assoc£¨£©
	$array1  = array( ""a""  =>  ""green"" ,  ""b""  =>  ""brown"" ,  ""c""  =>  ""blue"" ,  ""red"" );
	$array2  = array( ""a""  =>  ""green"" ,  ""b""  =>  ""yellow"" ,  ""blue"" ,  ""red"" );
	$result_array  =  array_intersect_assoc ( $array1 ,  $array2 );
	print_r ( $result_array );
		Array ( [a] => green )

array_combine()
	$a=array(""green"",""red"",""yellow"");
	$b=array(""avocado"",""apple"",""banana"");
	$c=array_combine($a, $b);
	print_r($c);
		Array ( [green] => avocado [red] => apple [yellow] => banana )

array_unique£¨£©
	$input  = array( ""a""  =>  ""green"" ,  ""red"" ,  ""b""  =>  ""green"" ,  ""blue"" ,  ""red"" );
	$result  =  array_unique ( $input );
	print_r ( $result );
		Array ( [a] => green [0] => red [1] => blue )

shuffle£¨£©
	$numbers  =  range ( 1 ,  20 );
	shuffle ( $numbers );
	print_r($numbers);
		Array ( [0] => 7 [1] => 15 [2] => 2 [3] => 17 [4] => 6 [5] => 9 [6] => 1 [7] => 16 [8] => 11 [9] => 18 [10] => 14 [11] => 20 [12] => 13 [13] => 8 [14] => 19 [15] => 5 [16] => 3 [17] => 10 [18] => 4 [19] => 12 )

array_rand£¨£©
	$input  = array( ""Neo"" ,  ""Morpheus"" ,  ""Trinity"" ,  ""Cypher"" ,  ""Tank"" );
	$rand_keys  =  array_rand ( $input ,  2 );
	print_r($rand_keys);
		Array ( [0] => 0 [1] => 3 )

compact()
	$firstname = ""Peter"";
	$lastname = ""Griffin"";
	$age = ""38"";
	$result = compact(""firstname"", ""lastname"", ""age"");
	print_r($result);
		Array ( [firstname] => Peter [lastname] => Griffin [age] => 38 )

substr_count() 
	$str = ""This is nice"";
	echo substr_count($str,""is"");
		2





























			




	

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
